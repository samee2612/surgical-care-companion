services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tka_postgres
    environment:
      POSTGRES_DB: tka_voice
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docs/database_schema.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d tka_voice"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - tka_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tka_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - tka_network

  # pgAdmin Database Administration
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: tka_pgadmin
    depends_on:
      - postgres
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@tka.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    restart: unless-stopped
    networks:
      - tka_network

  # TKA Voice Agent Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tka_backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://user:password@postgres:5432/tka_voice
      REDIS_URL: redis://redis:6379
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-true}
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_PHONE_NUMBER: ${TWILIO_PHONE_NUMBER}
      TWILIO_WEBHOOK_URL: ${TWILIO_WEBHOOK_URL}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      SECRET_KEY: ${SECRET_KEY}
      SMTP_SERVER: ${SMTP_SERVER:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
      - ./tmp_audio:/app/tmp_audio
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    restart: unless-stopped
    networks:
      - tka_network

  # ngrok Tunnel Service
  ngrok:
    build:
      context: ./ngrok
      dockerfile: Dockerfile
    container_name: tka_ngrok
    depends_on:
      backend:
        condition: service_healthy
    environment:
      NGROK_AUTHTOKEN: 2ywRokOHWLYP4Jf2KeUYqcEFbwP_2kjHu9cTCgxiXXQokKUJw
    command: ["ngrok", "http", "backend:8000", "--log=stdout", "--authtoken=2ywRokOHWLYP4Jf2KeUYqcEFbwP_2kjHu9cTCgxiXXQokKUJw"]
    ports:
      - "4040:4040"  # ngrok web interface
    volumes:
      - ./ngrok/ngrok.yml:/root/.ngrok2/ngrok.yml
    restart: unless-stopped
    networks:
      - tka_network

  # Test Runner Service
  test-runner:
    build:
      context: ./tests
      dockerfile: Dockerfile
    container_name: tka_test_runner
    depends_on:
      - backend
      - postgres
      - redis
    environment:
      DATABASE_URL: postgresql://user:password@postgres:5432/tka_voice_test
      REDIS_URL: redis://redis:6379
      BACKEND_URL: http://backend:8000
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
    volumes:
      - ./tests:/app/tests
      - ./backend:/app/backend
    command: tail -f /dev/null  # Keep container running
    networks:
      - tka_network

  # Frontend (if needed later)
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: tka_frontend
  #   depends_on:
  #     - backend
  #   environment:
  #     REACT_APP_API_URL: http://localhost:8000
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules
  #   command: npm start
  #   restart: unless-stopped
  #   networks:
  #     - tka_network

networks:
  tka_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  pgadmin_data: 