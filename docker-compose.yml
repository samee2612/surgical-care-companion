services:
  # PostgreSQL Database
  postgres:
    image: postgres:16
    container_name: surgicalcare_postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: surgicalcare_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docs/database_schema.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d surgicalcare_db"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: surgicalcare_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: surgicalcare_backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://user:password@postgres:5432/surgicalcare_db
      REDIS_URL: redis://redis:6379
      ENVIRONMENT: development
      DEBUG: true
    env_file:
      - .env
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./HealthSenseCare
      dockerfile: Dockerfile
    container_name: surgicalcare_frontend
    depends_on:
      - backend
    environment:
      VITE_API_URL: http://localhost:8000
      REPLIT_DOMAINS: localhost:3000
      SESSION_SECRET: 11c167a1ccc61b1c07e2c3e72acd03e7e3b32fd97b11d0d972e3b23de2c91f6f4a8358a9f50ce87b2207203c4e0e4b82115efad3b883445a358dbf12378b3ef4
    env_file:
      - .env
    ports:
      - "3000:5000"
    volumes:
      - ./HealthSenseCare:/app
      - /app/node_modules
    restart: unless-stopped

  # Ngrok for webhook tunneling
  ngrok:
    image: ngrok/ngrok:latest
    container_name: surgicalcare_ngrok
    depends_on:
      - backend
    environment:
      NGROK_AUTHTOKEN: ${NGROK_AUTH_TOKEN:-}
    command: http backend:8000
    ports:
      - "4040:4040"  # Ngrok web interface
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data: