services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tka_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docs/database_schema.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tka_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # pgAdmin Database Administration
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: tka_pgadmin
    depends_on:
      - postgres
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@tka.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    restart: unless-stopped

  # TKA Voice Agent Backend (Unified FastAPI + Flask Logic)
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: tka_backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      TEST_PHONE_NUMBER: ${TEST_PHONE_NUMBER}
      HOST: ${HOST}
      PORT: ${PORT}
      RELOAD: ${RELOAD}
      LOG_LEVEL: ${LOG_LEVEL}
    ports:
      - "${PORT:-8000}:${PORT:-8000}"
    volumes:
      - .:/app
    # CRUCIAL CHANGE: Removed "python scripts/init_db.py &&" from the command
    command: >
      sh -c "uvicorn backend.main:app --host 0.0.0.0 --port ${PORT:-8000} --reload"
    restart: unless-stopped

  # frontend: (still commented out)
  #   ...

volumes:
  postgres_data:
  redis_data:
  pgadmin_data: