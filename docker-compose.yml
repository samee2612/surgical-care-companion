version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tka_postgres
    environment:
      POSTGRES_DB: tka_voice
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docs/database_schema.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d tka_voice"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tka_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # pgAdmin Database Administration
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: tka_pgadmin
    depends_on:
      - postgres
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@tka.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    restart: unless-stopped

  # TKA Voice Agent Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tka_backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://user:password@postgres:5432/tka_voice
      REDIS_URL: redis://redis:6379
      ENVIRONMENT: development
      DEBUG: true
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    restart: unless-stopped

  # TKA Voice Agent Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: tka_frontend
    depends_on:
      - backend
    environment:
      REACT_APP_API_URL: http://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm start
    restart: unless-stopped

  # Surgical Care PostgreSQL Database
  surgicalcare_postgres:
    image: postgres:16
    container_name: surgicalcare_postgres
    environment:
      POSTGRES_USER: harsh
      POSTGRES_PASSWORD: harshpassword
      POSTGRES_DB: surgicalcare_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data:
  redis_data:
  pgadmin_data: